name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    name: Lint and test services
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - Order-service
          - Product-service
          - User-service
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps
        working-directory: ${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest flake8

      - name: Lint
        working-directory: ${{ matrix.service }}
        run: |
          flake8 --exclude .venv --ignore E501 .

      - name: Test
        working-directory: ${{ matrix.service }}
        run: |
          if [ -d tests ]; then pytest -q; else echo "No tests/ directory"; fi

  build-and-deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker images
        run: |
          set -euo pipefail
          services=("User-service" "Product-service" "Order-service")
          for dir in "${services[@]}"; do
            name=$(echo "$dir" | tr '[:upper:]' '[:lower:]')
            name=${name%-service}-service
            echo "Building $name from $dir"
            docker build -t $DOCKERHUB_USERNAME/$name:latest "$dir"
            docker push $DOCKERHUB_USERNAME/$name:latest
          done

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Deploy services to EKS with rollout and rollback
        run: |
          set -euo pipefail

          deploy_and_verify() {
            local name="$1"
            local file="$2"
            echo "Applying $file"
            kubectl apply -f "$file"
            echo "Waiting for rollout of deployment/$name"
            if ! kubectl rollout status deployment/$name --timeout=120s; then
              echo "Rollout failed for $name. Rolling back..."
              kubectl rollout undo deployment/$name || true
              kubectl rollout status deployment/$name --timeout=120s || true
              exit 1
            fi
          }

          deploy_and_verify user-service k8s/user-service.yaml
          deploy_and_verify product-service k8s/product-service.yaml
          deploy_and_verify order-service k8s/order-service.yaml

      - name: Get pods and services
        run: |
          kubectl get pods
          kubectl get svc
