name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  build-and-push:
    name: Build and push images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - service_dir: Order-service
            repo_name: order-service
          - service_dir: Product-service
            repo_name: product-service
          - service_dir: User-service
            repo_name: user-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS account ID
        id: aws
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=${ACCOUNT_ID}" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        env:
          ACCOUNT_ID: ${{ steps.aws.outputs.account_id }}
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Ensure ECR repository exists
        env:
          ACCOUNT_ID: ${{ steps.aws.outputs.account_id }}
          REPO_NAME: ${{ matrix.repo_name }}
        run: |
          aws ecr describe-repositories --repository-names "$REPO_NAME" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$REPO_NAME" --image-scanning-configuration scanOnPush=true >/dev/null

      - name: Build and push image
        env:
          ACCOUNT_ID: ${{ steps.aws.outputs.account_id }}
          REPO_NAME: ${{ matrix.repo_name }}
          IMAGE_URI: ${{ steps.aws.outputs.account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ matrix.repo_name }}
          GIT_SHA: ${{ github.sha }}
        run: |
          docker build -f "${{ matrix.service_dir }}/Dockerfile" -t "$REPO_NAME:latest" -t "$REPO_NAME:$GIT_SHA" "${{ matrix.service_dir }}"
          docker tag "$REPO_NAME:latest" "$IMAGE_URI:latest"
          docker tag "$REPO_NAME:$GIT_SHA" "$IMAGE_URI:$GIT_SHA"
          docker push "$IMAGE_URI:latest"
          docker push "$IMAGE_URI:$GIT_SHA"

  # Optional deploy to EKS (runs only if required secrets are provided)
  deploy-eks:
    name: Deploy to EKS (optional)
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ secrets.EKS_CLUSTER_NAME != '' && secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name "${{ secrets.EKS_CLUSTER_NAME }}" --region "${{ env.AWS_REGION }}"

      - name: Apply Kubernetes manifests
        run: |
          # Apply manifests if present; adjust as needed for your cluster
          if [ -d k8s ]; then
            kubectl apply -f k8s
          else
            echo "No k8s directory found; skipping apply"
          fi
